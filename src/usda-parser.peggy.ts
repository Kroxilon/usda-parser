import {USDA_File} from "./USDA_File";

// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public override message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public override name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { FILE: peg$parseFILE };
  let peg$startRuleFunction: () => any = peg$parseFILE;

  const peg$c0 = function(version: any, descriptor: any, statements: any): any {
      	return {
          version,
          descriptor,
          statements: statements ?? [],
        }
      };
  const peg$c1 = "{";
  const peg$c2 = peg$literalExpectation("{", false);
  const peg$c3 = "}";
  const peg$c4 = peg$literalExpectation("}", false);
  const peg$c5 = function(name: any, definitions: any): any {
  	    return {
  	      type: 'variantDef',
            name,
            definitions: definitions ?? [],
  	    }
  	  };
  const peg$c6 = function(head: any, tail: any): any {
        return [head].concat(tail);
      };
  const peg$c7 = "variantSet";
  const peg$c8 = peg$literalExpectation("variantSet", false);
  const peg$c9 = "=";
  const peg$c10 = peg$literalExpectation("=", false);
  const peg$c11 = function(name: any, definitions: any): any {
          return {
            type: 'variantSet',
            name,
            definitions: definitions ?? [],
          }
        };
  const peg$c12 = "#usda ";
  const peg$c13 = peg$literalExpectation("#usda ", false);
  const peg$c14 = /^[\n]/;
  const peg$c15 = peg$classExpectation(["\n"], false, false);
  const peg$c16 = function(version: any): any {
    		return version
      };
  const peg$c17 = "def";
  const peg$c18 = peg$literalExpectation("def", false);
  const peg$c19 = "over";
  const peg$c20 = peg$literalExpectation("over", false);
  const peg$c21 = function(subType: any, identifier: any): any {return identifier};
  const peg$c22 = function(subType: any, identifier: any, name: any, descriptor: any, statements: any): any {return {
            type: 'definition',
            subType,
            defType: identifier,
            name,
            descriptor,
            statements: statements ?? [],
          }};
  const peg$c23 = "(";
  const peg$c24 = peg$literalExpectation("(", false);
  const peg$c25 = ")";
  const peg$c26 = peg$literalExpectation(")", false);
  const peg$c27 = function(description: any, assignments: any): any {
        return {
          description,
          assignments:  assignments ?? [],
        }
      };
  const peg$c28 = function(keyword: any, identifier: any, value: any): any {
      return {
        type: 'assignment',
        keyword,
        identifier,
        value,
      }
    };
  const peg$c29 = "prepend";
  const peg$c30 = peg$literalExpectation("prepend", false);
  const peg$c31 = "add";
  const peg$c32 = peg$literalExpectation("add", false);
  const peg$c33 = function(keyword: any): any {return keyword};
  const peg$c34 = function(keyword: any, type: any, reference: any, value: any): any {return value};
  const peg$c35 = function(keyword: any, type: any, reference: any, value: any, desc: any): any {return desc};
  const peg$c36 = function(keyword: any, type: any, reference: any, value: any, descriptor: any): any {
        return {
          type: 'declaration',
          keyword,
          defineType: type,
          reference,
          value,
          descriptor,
        }
      };
  const peg$c37 = "varying";
  const peg$c38 = peg$literalExpectation("varying", false);
  const peg$c39 = "uniform";
  const peg$c40 = peg$literalExpectation("uniform", false);
  const peg$c41 = "custom";
  const peg$c42 = peg$literalExpectation("custom", false);
  const peg$c43 = /^[:.]/;
  const peg$c44 = peg$classExpectation([":", "."], false, false);
  const peg$c45 = "[]";
  const peg$c46 = peg$literalExpectation("[]", false);
  const peg$c47 = "class";
  const peg$c48 = peg$literalExpectation("class", false);
  const peg$c49 = function(id: any): any {return id};
  const peg$c50 = function(id: any, name: any, desc: any): any {return desc};
  const peg$c51 = function(id: any, name: any, descriptor: any, classDeclarations: any): any {
      	return {
          	type: 'classDefinition',
            id,
            name,
            descriptor,
            classDeclarations,
          }
      };
  const peg$c52 = function(items: any): any {
      	return items ?? []
      };
  const peg$c53 = "#";
  const peg$c54 = peg$literalExpectation("#", false);
  const peg$c55 = /^[^\n]/;
  const peg$c56 = peg$classExpectation(["\n"], true, false);
  const peg$c57 = function(value: any): any { return {
      type: 'comment',
      value,
    } };
  const peg$c58 = /^[a-zA-Z_]/;
  const peg$c59 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  const peg$c60 = /^[_a-zA-Z0-9]/;
  const peg$c61 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  const peg$c62 = function(txt: any): any {return txt};
  const peg$c63 = function(val: any): any {return val};
  const peg$c64 = "none";
  const peg$c65 = peg$literalExpectation("None", true);
  const peg$c66 = function(): any {return null};
  const peg$c67 = "true";
  const peg$c68 = peg$literalExpectation("true", true);
  const peg$c69 = function(): any {return true};
  const peg$c70 = "false";
  const peg$c71 = peg$literalExpectation("false", true);
  const peg$c72 = function(): any {return false};
  const peg$c73 = function(value: any): any {
      	return value;
      };
  const peg$c74 = /^[:]/;
  const peg$c75 = peg$classExpectation([":"], false, false);
  const peg$c76 = function(index: any, value: any): any {
        return {
          index,
          value,
        }
      };
  const peg$c77 = ",";
  const peg$c78 = peg$literalExpectation(",", false);
  const peg$c79 = function(head: any, tail: any): any {
        return {
          type: 'objectDeclarationList',
          values: [head].concat(tail),
        };
      };
  const peg$c80 = function(keyword: any, type: any, reference: any, value: any): any {
      	return {
            keyword,
            defineType: type,
            reference,
            value,
          }
      };
  const peg$c81 = function(values: any): any {
              return {
                type: 'objectDeclarationEntries',
                values,
              };
            };
  const peg$c82 = function(declarations: any): any {
      	return {
      	  type: 'objectValue',
          declarations,
        }
      };
  const peg$c83 = function(referenceFile: any, toImport: any): any {
    	return {
        type: 'externalReference',
        referenceFile,
        toImport,
      }
    };
  const peg$c84 = "@";
  const peg$c85 = peg$literalExpectation("@", false);
  const peg$c86 = /^[^@]/;
  const peg$c87 = peg$classExpectation(["@"], true, false);
  const peg$c88 = function(src: any): any {return {
      type: 'externalReferenceSrc',
      src,
    }};
  const peg$c89 = peg$otherExpectation("REFERENCE");
  const peg$c90 = "<";
  const peg$c91 = peg$literalExpectation("<", false);
  const peg$c92 = /^[\/]/;
  const peg$c93 = peg$classExpectation(["/"], false, false);
  const peg$c94 = ".";
  const peg$c95 = peg$literalExpectation(".", false);
  const peg$c96 = /^[.:]/;
  const peg$c97 = peg$classExpectation([".", ":"], false, false);
  const peg$c98 = ">";
  const peg$c99 = peg$literalExpectation(">", false);
  const peg$c100 = function(path: any, field: any): any {
        return {
          type: 'externalReferenceImport',
          importPath: path,
          field,
        }
      };
  const peg$c101 = "[";
  const peg$c102 = peg$literalExpectation("[", false);
  const peg$c103 = "]";
  const peg$c104 = peg$literalExpectation("]", false);
  const peg$c105 = function(values: any): any {
        return values ?? []
      };
  const peg$c106 = function(values: any): any {
          	return values
          };
  const peg$c107 = /^[0]/;
  const peg$c108 = peg$classExpectation(["0"], false, false);
  const peg$c109 = /^[xX]/;
  const peg$c110 = peg$classExpectation(["x", "X"], false, false);
  const peg$c111 = /^[0-9a-fA-F]/;
  const peg$c112 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  const peg$c113 = "-";
  const peg$c114 = peg$literalExpectation("-", false);
  const peg$c115 = /^[0-9]/;
  const peg$c116 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c117 = /^[eE]/;
  const peg$c118 = peg$classExpectation(["e", "E"], false, false);
  const peg$c119 = "+";
  const peg$c120 = peg$literalExpectation("+", false);
  const peg$c121 = function(val: any): any {
            return parseFloat(val)
          };
  const peg$c122 = "-inf";
  const peg$c123 = peg$literalExpectation("-inf", true);
  const peg$c124 = function(): any {return -Infinity};
  const peg$c125 = "inf";
  const peg$c126 = peg$literalExpectation("inf", true);
  const peg$c127 = function(): any {return Infinity};
  const peg$c128 = function(number: any): any {
    return number
  };
  const peg$c129 = function(value: any): any {
      	return value
      };
  const peg$c130 = peg$otherExpectation("\"");
  const peg$c131 = "\"";
  const peg$c132 = peg$literalExpectation("\"", false);
  const peg$c133 = function(contents: any): any {
      	return contents
      };
  const peg$c134 = peg$otherExpectation("'");
  const peg$c135 = "'";
  const peg$c136 = peg$literalExpectation("'", false);
  const peg$c137 = peg$otherExpectation("String Character");
  const peg$c138 = function(): any { return text(); };
  const peg$c139 = "\\";
  const peg$c140 = peg$literalExpectation("\\", false);
  const peg$c141 = peg$anyExpectation();
  const peg$c142 = function(v: any): any { return v[1] === "'" ? "'" : v[0] + v[1]; };
  const peg$c143 = function(v: any): any { return v[1] === '"' ? '"' : v[0] + v[1]; };
  const peg$c144 = "'''";
  const peg$c145 = peg$literalExpectation("'''", false);
  const peg$c146 = function(contents: any): any {
      return contents};
  const peg$c147 = "\"\"\"";
  const peg$c148 = peg$literalExpectation("\"\"\"", false);
  const peg$c149 = /^[\n\r\u2028\u2029]/;
  const peg$c150 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false);
  const peg$c151 = peg$otherExpectation("end of line");
  const peg$c152 = "\n";
  const peg$c153 = peg$literalExpectation("\n", false);
  const peg$c154 = "\r\n";
  const peg$c155 = peg$literalExpectation("\r\n", false);
  const peg$c156 = "\r";
  const peg$c157 = peg$literalExpectation("\r", false);
  const peg$c158 = "\u2028";
  const peg$c159 = peg$literalExpectation("\u2028", false);
  const peg$c160 = "\u2029";
  const peg$c161 = peg$literalExpectation("\u2029", false);
  const peg$c162 = peg$otherExpectation("WHITESPACE");
  const peg$c163 = /^[ \t\n\r]/;
  const peg$c164 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  const peg$c165 = peg$otherExpectation("NON_LINE_WHITESPACE");
  const peg$c166 = /^[ \t\r]/;
  const peg$c167 = peg$classExpectation([" ", "\t", "\r"], false, false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseFILE(): USDA_File {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseWHITESPACE_NON_COMMENT();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVERSION();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseWHITESPACE();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseDESCRIPTOR();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseWHITESPACE();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseSTATEMENTS();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseWHITESPACE();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c0(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVARIANT_DEF(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSTRING();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c2); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseDEFINITION_STATEMENTS();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseWHITESPACE();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c3;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c5(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVARIANT_DEFINITION_LIST(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseVARIANT_DEF();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseSTATEMENT_SEPARATOR();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseVARIANT_DEF();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseSTATEMENT_SEPARATOR();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseVARIANT_DEF();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVARIANT_SET(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseSTRING();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseWHITESPACE();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 123) {
                  s7 = peg$c1;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c2); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseWHITESPACE();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseVARIANT_DEFINITION_LIST();
                    if (s9 as any === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseWHITESPACE();
                      if (s10 as any !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s11 = peg$c3;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c4); }
                        }
                        if (s11 as any !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c11(s3, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVERSION(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNUMBER();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseNON_LINE_WHITESPACE();
        if (s3 as any !== peg$FAILED) {
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFINITION(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNON_LINE_WHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIDENTIFIER();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseNON_LINE_WHITESPACE();
          if (s5 as any !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c21(s1, s4);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSTRING();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseWHITESPACE();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseDESCRIPTOR();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseWHITESPACE();
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 123) {
                    s8 = peg$c1;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c2); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseWHITESPACE();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseDEFINITION_STATEMENTS();
                      if (s10 as any === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseWHITESPACE();
                        if (s11 as any !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s12 = peg$c3;
                            peg$currPos++;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c4); }
                          }
                          if (s12 as any !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c22(s1, s3, s4, s6, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTATEMENT_SEPARATOR(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNON_LINE_WHITESPACE();
    if (s1 as any !== peg$FAILED) {
      if (peg$c14.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseWHITESPACE();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseASSIGNMENT_LIST(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseASSIGNMENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseSTATEMENT_SEPARATOR();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseASSIGNMENT();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseSTATEMENT_SEPARATOR();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseASSIGNMENT();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTATEMENT(): any {
    let s0;

    s0 = peg$parseCLASS_DEFINITION();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseDEFINITION();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseVARIANT_SET();
      }
    }

    return s0;
  }

  function peg$parseSTATEMENTS(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSTATEMENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseSTATEMENT_SEPARATOR();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseSTATEMENT();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseSTATEMENT_SEPARATOR();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseSTATEMENT();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFINITION_STATEMENT(): any {
    let s0;

    s0 = peg$parseSTATEMENT();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseDECLARATION();
    }

    return s0;
  }

  function peg$parseDEFINITION_STATEMENTS(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDEFINITION_STATEMENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseSTATEMENT_SEPARATOR();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseDEFINITION_STATEMENT();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseSTATEMENT_SEPARATOR();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseDEFINITION_STATEMENT();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDESCRIPTOR(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseSTRING();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseASSIGNMENT_LIST();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseWHITESPACE();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c25;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c27(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseASSIGNMENT(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseASSIGNMENT_KEYWORDS();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseIDENTIFIER();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseWHITESPACE();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseVALUE();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c28(s1, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseASSIGNMENT_KEYWORDS(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c31) {
        s0 = peg$c31;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
    }

    return s0;
  }

  function peg$parseDECLARATION(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseDECLARATION_KEYWORDS();
    if (s2 as any === peg$FAILED) {
      s2 = null;
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseWHITESPACE();
      if (s3 as any !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c33(s2);
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTYPE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseWHITESPACE();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseREFERENCE();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseWHITESPACE();
            if (s6 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s7 = peg$c9;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseWHITESPACE();
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parseVALUE();
                  if (s9 as any !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c34(s1, s2, s4, s9);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseWHITESPACE();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseDESCRIPTOR();
                if (s8 as any !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c35(s1, s2, s4, s5, s8);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c36(s1, s2, s4, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDECLARATION_KEYWORDS(): any {
    let s0;

    if (input.substr(peg$currPos, 7) === peg$c37) {
      s0 = peg$c37;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c39) {
        s0 = peg$c39;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c41) {
          s0 = peg$c41;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
      }
    }

    return s0;
  }

  function peg$parseREFERENCE(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseIDENTIFIER();
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (peg$c43.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s5 as any !== peg$FAILED) {
        s6 = peg$parseIDENTIFIER();
        if (s6 as any !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (peg$c43.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseIDENTIFIER();
          if (s6 as any !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseSTRING();
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTYPE(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseIDENTIFIER();
    if (s2 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c45) {
        s3 = peg$c45;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s3 as any === peg$FAILED) {
        s3 = null;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCLASS_DEFINITION(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNON_LINE_WHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIDENTIFIER();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseNON_LINE_WHITESPACE();
          if (s5 as any !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c49(s4);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSTRING();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseWHITESPACE();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseDESCRIPTOR();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseWHITESPACE();
                if (s8 as any !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c50(s3, s4, s7);
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseCLASS_DECLARATIONS();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s3, s4, s6, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCLASS_DECLARATION(): any {
    let s0;

    s0 = peg$parseDEFINITION();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseDECLARATION();
    }

    return s0;
  }

  function peg$parseCLASS_DECLARATION_LIST(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCLASS_DECLARATION();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseSTATEMENT_SEPARATOR();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseCLASS_DECLARATION();
        if (s5 as any !== peg$FAILED) {
          s3 = s5;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseSTATEMENT_SEPARATOR();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseCLASS_DECLARATION();
          if (s5 as any !== peg$FAILED) {
            s3 = s5;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCLASS_DECLARATIONS(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCLASS_DECLARATION_LIST();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c52(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMENT(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c55.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        if (peg$c55.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIDENTIFIER(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (peg$c58.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s3 as any !== peg$FAILED) {
      s4 = [];
      if (peg$c60.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      while (s5 as any !== peg$FAILED) {
        s4.push(s5);
        if (peg$c60.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
      }
      if (s4 as any !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c62(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVALUE(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSTRING();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseBOOLEAN();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseNUMBER();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseARRAY_VALUE();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parseTUPLE_VALUE();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseEXTERNAL_REFERENCE_IMPORT();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parseEXTERNAL_REFERENCE();
                if (s1 as any === peg$FAILED) {
                  s1 = peg$parseOBJECT_VALUE();
                  if (s1 as any === peg$FAILED) {
                    s1 = peg$parseNONE();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c63(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNONE(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c64) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c66();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBOOLEAN(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
      s2 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s2 as any !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c69();
    }
    s1 = s2;
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c70) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c72();
      }
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseINDEXED_OBJECT_DECLARATION(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNUMBER();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        if (peg$c74.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseVALUE();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c76(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOBJECT_DECLARATION_LIST(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseINDEXED_OBJECT_DECLARATION();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseWHITESPACE();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c77;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseWHITESPACE();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseINDEXED_OBJECT_DECLARATION();
            if (s7 as any !== peg$FAILED) {
              s3 = s7;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseWHITESPACE();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c77;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseWHITESPACE();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseINDEXED_OBJECT_DECLARATION();
              if (s7 as any !== peg$FAILED) {
                s3 = s7;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseWHITESPACE();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c77;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c79(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOBJECT_DECLARATION(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseDECLARATION_KEYWORDS();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTYPE();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseREFERENCE();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseWHITESPACE();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                  s8 = peg$c9;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parseWHITESPACE();
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parseVALUE();
                    if (s10 as any !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c34(s1, s3, s5, s10);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c80(s1, s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOBJECT_DECLARATIONS(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$parseOBJECT_DECLARATION_LIST();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseWHITESPACE();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseOBJECT_DECLARATION();
        if (s4 as any !== peg$FAILED) {
          s2 = s4;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseWHITESPACE();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOBJECT_DECLARATION();
          if (s4 as any !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOBJECT_VALUE(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOBJECT_DECLARATIONS();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c82(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXTERNAL_REFERENCE(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseEXTERNAL_REFERENCE_STRING();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseEXTERNAL_REFERENCE_IMPORT();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c83(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXTERNAL_REFERENCE_STRING(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c84;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c86.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        if (peg$c86.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s3 = peg$c84;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c88(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEXTERNAL_REFERENCE_IMPORT(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c91); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNON_LINE_WHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s5 as any === peg$FAILED) {
          s5 = peg$parseIDENTIFIER();
        }
        if (s5 as any !== peg$FAILED) {
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            if (peg$c92.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s5 as any === peg$FAILED) {
              s5 = peg$parseIDENTIFIER();
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 as any !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c94;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = [];
            if (peg$c96.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s8 as any === peg$FAILED) {
              s8 = peg$parseIDENTIFIER();
            }
            if (s8 as any !== peg$FAILED) {
              while (s8 as any !== peg$FAILED) {
                s7.push(s8);
                if (peg$c96.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c97); }
                }
                if (s8 as any === peg$FAILED) {
                  s8 = peg$parseIDENTIFIER();
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 as any !== peg$FAILED) {
              s6 = input.substring(s6, peg$currPos);
            } else {
              s6 = s7;
            }
            if (s6 as any !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseNON_LINE_WHITESPACE();
            if (s5 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s6 = peg$c98;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c100(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }

    return s0;
  }

  function peg$parseVALUE_LIST(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseVALUE();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseWHITESPACE();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c77;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseWHITESPACE();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseVALUE();
            if (s7 as any !== peg$FAILED) {
              s3 = s7;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseWHITESPACE();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c77;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseWHITESPACE();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseVALUE();
              if (s7 as any !== peg$FAILED) {
                s3 = s7;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseWHITESPACE();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c77;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseARRAY_VALUE(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c101;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVALUE_LIST();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c103;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c105(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTUPLE_VALUE(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVALUE_LIST();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c25;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c106(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNUMBER(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$currPos;
    if (peg$c107.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    if (s4 as any !== peg$FAILED) {
      if (peg$c109.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s5 as any !== peg$FAILED) {
        s6 = [];
        if (peg$c111.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        while (s7 as any !== peg$FAILED) {
          s6.push(s7);
          if (peg$c111.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
        }
        if (s6 as any !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 as any === peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s4 = peg$c113;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s4 as any === peg$FAILED) {
        s4 = null;
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = [];
        if (peg$c115.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        if (s7 as any !== peg$FAILED) {
          while (s7 as any !== peg$FAILED) {
            s6.push(s7);
            if (peg$c115.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s7 = peg$c94;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s7 as any === peg$FAILED) {
            s7 = null;
          }
          if (s7 as any !== peg$FAILED) {
            s8 = [];
            if (peg$c115.test(input.charAt(peg$currPos))) {
              s9 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
            while (s9 as any !== peg$FAILED) {
              s8.push(s9);
              if (peg$c115.test(input.charAt(peg$currPos))) {
                s9 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c116); }
              }
            }
            if (s8 as any !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 as any === peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c94;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s6 as any !== peg$FAILED) {
            s7 = [];
            if (peg$c115.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c116); }
            }
            if (s8 as any !== peg$FAILED) {
              while (s8 as any !== peg$FAILED) {
                s7.push(s8);
                if (peg$c115.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c116); }
                }
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 as any !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$currPos;
          if (peg$c117.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
          if (s7 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s8 = peg$c119;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c120); }
            }
            if (s8 as any === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s8 = peg$c113;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
            }
            if (s8 as any === peg$FAILED) {
              s8 = null;
            }
            if (s8 as any !== peg$FAILED) {
              s9 = [];
              if (peg$c115.test(input.charAt(peg$currPos))) {
                s10 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c116); }
              }
              if (s10 as any !== peg$FAILED) {
                while (s10 as any !== peg$FAILED) {
                  s9.push(s10);
                  if (peg$c115.test(input.charAt(peg$currPos))) {
                    s10 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                  }
                }
              } else {
                s9 = peg$FAILED;
              }
              if (s9 as any !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 as any === peg$FAILED) {
            s6 = null;
          }
          if (s6 as any !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    if (s3 as any !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 as any !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c121(s2);
    }
    s1 = s2;
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c122) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c124();
      }
      s1 = s2;
      if (s1 as any === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c125) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c127();
        }
        s1 = s2;
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c128(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSTRING(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTRIPLESINGLESTRING();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseTRIPLEDOUBLESTRING();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseDOUBLESTRING();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseSINGLESTRING();
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c129(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDOUBLESTRING_CHAR(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c131;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }

    return s0;
  }

  function peg$parseDOUBLESTRING(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDOUBLESTRING_CHAR();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseDoubleStringCharacter();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseDoubleStringCharacter();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseDOUBLESTRING_CHAR();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSINGLESTRING_CHAR(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c135;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }

    return s0;
  }

  function peg$parseSINGLESTRING(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSINGLESTRING_CHAR();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseSingleStringCharacter();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseSingleStringCharacter();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseSINGLESTRING_CHAR();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleStringCharacter(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$parseSingleQuoteEscape();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c135;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
      peg$silentFails--;
      if (s2 as any === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c138();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parseSingleQuoteEscape(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s2 = peg$c139;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s2 as any !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c142(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDoubleStringCharacter(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$parseQuoteEscape();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c131;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
      peg$silentFails--;
      if (s2 as any === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c138();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }

    return s0;
  }

  function peg$parseQuoteEscape(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s2 = peg$c139;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s2 as any !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c143(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTRIPLESINGLESTRING(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c144) {
      s1 = peg$c144;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseTRIPLESINGLEStringCharacter();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseTRIPLESINGLEStringCharacter();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c144) {
          s3 = peg$c144;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c145); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c146(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTRIPLESINGLEStringCharacter(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c144) {
      s2 = peg$c144;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c145); }
    }
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c138();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTRIPLEDOUBLESTRING(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c147) {
      s1 = peg$c147;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c148); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseTRIPLEStringCharacter();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseTRIPLEStringCharacter();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c147) {
          s3 = peg$c147;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTRIPLEStringCharacter(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c147) {
      s2 = peg$c147;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c148); }
    }
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c138();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceCharacter(): any {
    let s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c141); }
    }

    return s0;
  }

  function peg$parseLineTerminator(): any {
    let s0;

    if (peg$c149.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }

    return s0;
  }

  function peg$parseLineTerminatorSequence(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c152;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c154) {
        s0 = peg$c154;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c156;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c158;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c159); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c160;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c161); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }

    return s0;
  }

  function peg$parseWHITESPACE(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c163.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseCOMMENT();
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c163.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseCOMMENT();
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }

    return s0;
  }

  function peg$parseWHITESPACE_NON_COMMENT(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c163.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c163.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }

    return s0;
  }

  function peg$parseNON_LINE_WHITESPACE(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c166.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c166.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseCOMMENT();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c165); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => USDA_File;
export const parse: ParseFunction = peg$parse;

